// create an array with our two pipelines
pipelines = ["awsome-pipeline"]
// iterate through the array and call the create_pipeline method
pipelines.each { pipeline ->
    println "Creating pipeline ${pipeline}"
    create_pipeline(pipeline)
}
// a method that creates a basic pipeline with the given parameter name
def create_pipeline(String name) {
    pipelineJob(name) {
        definition {
            cps {
                sandbox(true)
                script("""
// this is an example declarative pipeline that says hello and goodbye
pipeline {
    environment {
      registry = "{{ dockerhub_username }}/web-app"
      registryCredential = 'dockerhub-account'
      dockerImage = ''
    }
    agent any
    stages {
        stage('Checkout') {
            steps {
                git url: 'https://github.com/atileren/platform-project.git', credentialsId: 'github-account', branch: 'master'
            }
        }
        stage('Building our image') {
            steps{
              dir("web-app"){
                script {
                    dockerImage = docker.build registry + ":latest"
                }
              }
            }
        }
        stage('Push Image') {
            steps{
                script {
                     docker.withRegistry( '', registryCredential){                            
                     dockerImage.push()
                     }
                }
            } 
        }
        stage('List nodes') {
           steps{
             dir("web-app"){
                withKubeConfig([credentialsId: 'kubeconfigID',
                    caCertificate: "{{ ca }}",
                    serverUrl: "{{ server_url  }}",
                    contextName: "{{ context_name  }}",
                    clusterName: "{{ cluster_name  }}",
                    namespace: "{{ namespace }}"
                    ]) {
                          sh 'kubectl apply -f deployment.yaml'
                       }
                }
             } 
        }

    }
}
""")
            }
        }
    }
}
