---
  - name: "Insall Jenkins"
    hosts: deployer
    become: true
    vars:
      ansible_ssh_private_key_file: "/workspace/tf/infra/provision/access/deployment-ec2-key"
      jenkins_admin_password: ""
      jenkins_dev_password: ""
      github_username: ""
      github_password: ''
      dockerhub_username: ""
      dockerhub_password: ''
      namespace: ''
      jenkins_k8s_user: ''
            

    tasks:
    - name: get certificate-authority-data from kubeconfig
      shell: cat ~/.kube/config | grep certificate-authority-data | awk '{print $2}'
      register: ca_result
      delegate_to: 127.0.0.1
      become: false

    - set_fact:
        ca={{ ca_result.stdout }}

    - name:  get server url from kubeconfig
      shell:  cat ~/.kube/config | grep server | awk '{print $2}'
      register: server_url_result
      delegate_to: 127.0.0.1
      become: false

    - set_fact:
        server_url={{ server_url_result.stdout }}

    - name: get current-context from kubeconfig
      shell:  cat ~/.kube/config | grep current-context | awk '{print $2}'
      register: context_name_result
      delegate_to: 127.0.0.1
      become: false

    - set_fact:
        context_name={{ context_name_result.stdout }}

    - name: get cluster name from kubeconfig
      shell: "cat ~/.kube/config | grep 'cluster: '  | awk '{print $2}'"
      register: cluster_name_result
      delegate_to: 127.0.0.1
      become: false

    - set_fact:
        cluster_name={{ cluster_name_result.stdout }}

    - name: create {{ namespace }} namespace
      shell: kubectl create ns {{ namespace }}
      delegate_to: 127.0.0.1
      become: false
    
    - name: create serviceaccount {{ jenkins_k8s_user }} in {{ namespace }} namespace
      shell: kubectl -n {{ namespace }} create serviceaccount {{ jenkins_k8s_user }}
      delegate_to: 127.0.0.1
      become: false

    - name: create rolebinding {{ jenkins_k8s_user }}-binding in {{ namespace }} namespace
      shell: kubectl -n {{ namespace }} create rolebinding {{ jenkins_k8s_user }}-binding --clusterrole=cluster-admin --serviceaccount={{ namespace }}:{{ jenkins_k8s_user }}
      delegate_to: 127.0.0.1
      become: false

    - name: get {{ jenkins_k8s_user }} serviceaccount token name
      shell: kubectl -n {{ namespace }} get serviceaccount {{ jenkins_k8s_user }} -o go-template {% raw %} --template='{{range .secrets}}{{.name}}{{"\n"}}{{end}}' {% endraw %}
      register: token_name_result
      delegate_to: 127.0.0.1
      become: false

    - set_fact:
        token_name={{ token_name_result.stdout }}

    - name: get {{ jenkins_k8s_user }} serviceaccount token
      shell: kubectl -n {{ namespace }} get secrets {{ token_name }} -o go-template --template {% raw %} '{{index .data "token"}}' {% endraw %} | base64 -d
      register: jenkins_user_token_result
      delegate_to: 127.0.0.1
      become: false

    - set_fact:
        jenkins_user_token={{ jenkins_user_token_result.stdout }}
            
    - name: generate jenkins config file
      template:
        src: /workspace/ansible/jenkins/jenkins-casc.yaml.j2
        dest: /workspace/ansible/jenkins/jenkins-casc.yaml
      delegate_to: 127.0.0.1

    - name: generate pipeline file
      template:
        src: /workspace/ansible/jenkins/seedjob.groovy.j2
        dest: /workspace/ansible/jenkins/seedjob.groovy
      delegate_to: 127.0.0.1


    - name: create build directory
      file:
        path: /workspace/jenkins_build
        state: directory
        owner: root
        group: root
        mode: '0755'
        recurse: yes

    - name: copy Dockerfile
      copy:
        src: "{{ item }}"
        dest: /workspace/jenkins_build/
        owner: root
        group: root
        mode: '0644'
      with_fileglob:
      - /workspace/ansible/jenkins/*

    - name: build container image
      docker_image:
        name: jenkins-casc:v1.0
        build:
          path: /workspace/jenkins_build
        source: build
        state: present
 

    - name: Create jenkins container
      docker_container:
        name: jenkins-casc
        image: jenkins-casc:v1.0
        state: started
        recreate: yes
        published_ports:
          - 8080:8080 
        volumes: 
          - /var/run/docker.sock:/var/run/docker.sock
